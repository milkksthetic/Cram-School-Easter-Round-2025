# -*- coding: utf-8 -*-
"""cybersecurity_ai_challenge.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pZdkANXMrsXXKSUO_3s5R2WHqKa0duQN
"""

import pandas as pd
# Remember to upload the train and test data csv before running
# === Read the data
df_train = pd.read_csv("train_data.csv")
df_test = pd.read_csv("test_data.csv")

# Subtask 1
import csv
import re

with open("output.csv", "w") as output:
    writer = csv.DictWriter(output, fieldnames=["subtaskID", "datapointID", "answer"])
    writer.writeheader()

with open("test_data.csv") as test:
    reader = csv.reader(test)
    next(reader)

    for row in reader:
        if re.search(r"([0][0-9]:[0-5][0-9]:[0-5][0-9])", row[1]) or re.search(r"([1][0-1]:[0-5][0-9]:[0-5][0-9])", row[1]):
            with open("output.csv", "a") as output:
                writer = csv.DictWriter(output, fieldnames=["subtaskID", "datapointID", "answer"])
                writer.writerow({"subtaskID": 1, "datapointID": row[0], "answer": "AM"})

        else:
            with open("output.csv", "a") as output:
                writer = csv.DictWriter(output, fieldnames=["subtaskID", "datapointID", "answer"])
                writer.writerow({"subtaskID": 1, "datapointID": row[0], "answer": "PM"})

# Subtask 2
from sklearn.ensemble import HistGradientBoostingClassifier, HistGradientBoostingRegressor, RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

X = df_train.drop(["ID", "Timestamp", "Attack Type"], axis=1)
y = df_train["Attack Type"]

scaler = StandardScaler()
X = scaler.fit_transform(X)

X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

model = HistGradientBoostingClassifier(random_state=42)
model.fit(X_train, y_train)

val_accuracy = model.score(X_val, y_val)
print(f"Validation Accuracy: {val_accuracy:.4f}")

test_scaled = scaler.transform(df_test.drop(["ID", "Timestamp"], axis=1))
predictions = model.predict(test_scaled)

df_test["Attack Type"] = predictions
df_test.to_csv("test_pred.csv")

with open("output.csv", "a") as output:
    writer = csv.DictWriter(output, fieldnames=["subtaskID", "datapointID", "answer"])

    with open("test_pred.csv", "r") as pred:
        reader = csv.reader(pred)
        next(reader)

        for row in reader:
            writer.writerow({"subtaskID": 2, "datapointID": row[1], "answer": row[16]})